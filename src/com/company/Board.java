package com.company;

import com.company.core.BoardLetters;
import com.company.core.Position;
import com.company.core.exceptions.OccupiedSquare;
import com.company.figures.Figure;
import com.company.figures.figur_impls.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Board {

    private final char [][] board = {
            {'⬜','⬛','⬜','⬛','⬜','⬛','⬜','⬛'},
            {'⬛','⬜','⬛','⬜','⬛','⬜','⬛','⬜'},
            {'⬜','⬛','⬜','⬛','⬜','⬛','⬜','⬛'},
            {'⬛','⬜','⬛','⬜','⬛','⬜','⬛','⬜'},
            {'⬜','⬛','⬜','⬛','⬜','⬛','⬜','⬛'},
            {'⬛','⬜','⬛','⬜','⬛','⬜','⬛','⬜'},
            {'⬜','⬛','⬜','⬛','⬜','⬛','⬜','⬛'},
            {'⬛','⬜','⬛','⬜','⬛','⬜','⬛','⬜'}
    };

    public final List<Figure> figures = new ArrayList<>();

    public void addFigure(Figure figure) throws OccupiedSquare {
        if (isEmpty(figure.position)) {
            figures.add(figure);
            board[figure.position.y-1][figure.position.x-1] = figure.figureChar;
        } else {
            throw new OccupiedSquare(figure.position);
        }
    }

    public boolean isEmpty(Position position) {
        return board[position.y-1][position.x-1] == '⬛' || board[position.y-1][position.x-1] == '⬜';
    }

    public Figure getFigureByPosition(Position position) {
        char figureChar = board[position.y-1][position.x-1];
        switch (figureChar) { // generated by ChatGPT
            case '♔' -> {
                return new King(position, false);
            }
            case '♕' -> {
                return new Queen(position, false);
            }
            case '♖' -> {
                return new Rook(position, false);
            }
            case '♗' -> {
                return new Bishop(position, false);
            }
            case '♘' -> {
                return new Knight(position, false);
            }
            case '♙' -> {
                return new Pawn(position, false);
            }
            case '♚' -> {
                return new King(position, true);
            }
            case '♛' -> {
                return new Queen(position, true);
            }
            case '♜' -> {
                return new Rook(position, true);
            }
            case '♝' -> {
                return new Bishop(position, true);
            }
            case '♞' -> {
                return new Knight(position, true);
            }
            case '♟' -> {
                return new Pawn(position, true);
            }
            default -> {
                return null;
            }
        }

    }

    public void resetBoard() { // generated by ChatGPT
        // White pieces
        Figure whiteKing = new King(new Position(BoardLetters.E, 1), true);
        Figure whiteQueen = new Queen(new Position(BoardLetters.D, 1), true);
        Figure whiteRook1 = new Rook(new Position(BoardLetters.A, 1), true);
        Figure whiteRook2 = new Rook(new Position(BoardLetters.H, 1), true);
        Figure whiteBishop1 = new Bishop(new Position(BoardLetters.C, 1), true);
        Figure whiteBishop2 = new Bishop(new Position(BoardLetters.F, 1), true);
        Figure whiteKnight1 = new Knight(new Position(BoardLetters.B, 1), true);
        Figure whiteKnight2 = new Knight(new Position(BoardLetters.G, 1), true);
        Figure whitePawn1 = new Pawn(new Position(BoardLetters.A, 2), true);
        Figure whitePawn2 = new Pawn(new Position(BoardLetters.B, 2), true);
        Figure whitePawn3 = new Pawn(new Position(BoardLetters.C, 2), true);
        Figure whitePawn4 = new Pawn(new Position(BoardLetters.D, 2), true);
        Figure whitePawn5 = new Pawn(new Position(BoardLetters.E, 2), true);
        Figure whitePawn6 = new Pawn(new Position(BoardLetters.F, 2), true);
        Figure whitePawn7 = new Pawn(new Position(BoardLetters.G, 2), true);
        Figure whitePawn8 = new Pawn(new Position(BoardLetters.H, 2), true);

        // Black pieces
        Figure blackKing = new King(new Position(BoardLetters.E, 8), false);
        Figure blackQueen = new Queen(new Position(BoardLetters.D, 8), false);
        Figure blackRook1 = new Rook(new Position(BoardLetters.A, 8), false);
        Figure blackRook2 = new Rook(new Position(BoardLetters.H, 8), false);
        Figure blackBishop1 = new Bishop(new Position(BoardLetters.C, 8), false);
        Figure blackBishop2 = new Bishop(new Position(BoardLetters.F, 8), false);
        Figure blackKnight1 = new Knight(new Position(BoardLetters.B, 8), false);
        Figure blackKnight2 = new Knight(new Position(BoardLetters.G, 8), false);
        Figure blackPawn1 = new Pawn(new Position(BoardLetters.A, 7), false);
        Figure blackPawn2 = new Pawn(new Position(BoardLetters.B, 7), false);
        Figure blackPawn3 = new Pawn(new Position(BoardLetters.C, 7), false);
        Figure blackPawn4 = new Pawn(new Position(BoardLetters.D, 7), false);
        Figure blackPawn5 = new Pawn(new Position(BoardLetters.E, 7), false);
        Figure blackPawn6 = new Pawn(new Position(BoardLetters.F, 7), false);
        Figure blackPawn7 = new Pawn(new Position(BoardLetters.G, 7), false);
        Figure blackPawn8 = new Pawn(new Position(BoardLetters.H, 7), false);

        // Add all figures to the list
        figures.addAll(Arrays.asList(whiteKing, whiteQueen, whiteRook1, whiteRook2, whiteBishop1, whiteBishop2, whiteKnight1, whiteKnight2, whitePawn1, whitePawn2, whitePawn3, whitePawn4, whitePawn5, whitePawn6, whitePawn7, whitePawn8, blackKing, blackQueen, blackRook1, blackRook2, blackBishop1, blackBishop2, blackKnight1, blackKnight2, blackPawn1, blackPawn2, blackPawn3, blackPawn4, blackPawn5, blackPawn6, blackPawn7, blackPawn8));

    }

    public void render() {
        for(int y = board.length-1; y >= 0; y--){
            for(int x = board[y].length-1; x >= 0; x--){
                if((board[y][x] == '⬜' || board[y][x] == '⬛') && x != 7) System.out.print(" ");
                System.out.print(board[y][x]);
            }
            System.out.println();
        }
    }
}
